func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(hidalgo,bins,"Histogram Test","Thickness (mm)","Frequency, bins =")
testv <- c()
for (t in 1:1000){
testv[i] <- t
}
testv
testv <- c()
for (t in 1:1000){
testv[t] <- t
}
testv
# testv <- c(1,2,3,4,5,6,7,8,9,10)
testv <- c()
for (t in 1:1000){
testv[t] <- t
}
testv
testbins <- c(10,20,30)
#Path information for reading file from local machine
PathTohidalgo = "C:/Users/drewm/Documents/GitHub/code-stat700/hidalgo.dat"
# #Assigning data from file to data frame
# hidalgo <- read.delim(PathTohidalgo,header=TRUE,skip= 0,sep = "",as.is=TRUE)
#
# hidalgo <- as.numeric(hidalgo$X.060)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
testv <- c()
for (t in 1:1000){
testv[t] <- t
}
testv
testbins <- c(10,50,100)
#Path information for reading file from local machine
PathTohidalgo = "C:/Users/drewm/Documents/GitHub/code-stat700/hidalgo.dat"
# #Assigning data from file to data frame
# hidalgo <- read.delim(PathTohidalgo,header=TRUE,skip= 0,sep = "",as.is=TRUE)
#
# hidalgo <- as.numeric(hidalgo$X.060)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
testv <- c()
for (t in 1:1000){
testv[t] <- t
}
testv
testbins <- c(5,10,100)
#Path information for reading file from local machine
PathTohidalgo = "C:/Users/drewm/Documents/GitHub/code-stat700/hidalgo.dat"
# #Assigning data from file to data frame
# hidalgo <- read.delim(PathTohidalgo,header=TRUE,skip= 0,sep = "",as.is=TRUE)
#
# hidalgo <- as.numeric(hidalgo$X.060)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
testv <- c()
for (t in 1:1000){
testv[t] <- t
}
testv
testbins <- c(5,10,50)
#Path information for reading file from local machine
PathTohidalgo = "C:/Users/drewm/Documents/GitHub/code-stat700/hidalgo.dat"
# #Assigning data from file to data frame
# hidalgo <- read.delim(PathTohidalgo,header=TRUE,skip= 0,sep = "",as.is=TRUE)
#
# hidalgo <- as.numeric(hidalgo$X.060)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
testv <- c()
for (t in 1:1000){
testv[t] <- t
}
testv
testbins <- c(5,10,50)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
testv <- c()
for (t in 1:10000){
testv[t] <- t
}
testv
testbins <- c(5,10,50)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:10000){
testv[t] <- t
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:10000){
testv[t] <- t
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:1000){
testv[t] <- rnorm(1000)
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:100){
testv[t] <- rnorm(100)
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:10000){
testv[t] <- rnorm(10000)
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:100){
testv[t] <- rnorm(100)
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:100){
testv[t] <- rnorm(100)
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
#Path information for reading file from local machine
PathTohidalgo = "C:/Users/drewm/Documents/GitHub/code-stat700/hidalgo.dat"
#Assigning data from file to data frame
hidalgo <- read.delim(PathTohidalgo,header=TRUE,skip= 0,sep = "",as.is=TRUE)
#Creating function and running requested values
hidalgo <- as.numeric(hidalgo$X.060)
bins <- c(12,36,60)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(hidalgo,bins,"1872 Hidalgo issue","Thickness (mm)","Frequency, bins =")
#This section will import the JoyOfCooking data from a CSV file into a dataframe.
PathToJoy <- "C:/Users/drewm/Documents/GitHub/code-stat700/JoyOfCooking.csv"
JoyOfCooking <- read.csv(PathToJoy,header=TRUE)
JoyOfCooking
#This section will present a histogram of the JoyOfCooking data (Calories Per Serving) that was recently imported.
hist(JoyOfCooking$CaloriesperServing2006,main = paste("Histogram of Calories Per Serving 2006"),xlab = "Calories Per Serving")
#This section will present a histogram of the JoyOfCooking data (Servings Per Recipe) that was recently imported.
hist(JoyOfCooking$ServingsperRecipe2006,main = paste("Histogram of Servings Per Recipe 2006"),xlab = "Servings Per Recipe")
#This section will present a Q-Q Norm graph of the JoyOfCooking data (Calories Per Serving) that was recently imported.
qqnorm(JoyOfCooking$CaloriesperServing2006,main = "Normal Q-Q Plot for Calories Per Serving 2006")
#This section will present a Q-Q Norm graph of the JoyOfCooking data (Calories Per Serving) that was recently imported.
qqnorm(JoyOfCooking$ServingsperRecipe2006,main = "Normal Q-Q Plot for Servings Per Recipe 2006")
#This section will present a box-whisker plot of the JoyOfCooking data (Calories Per Serving) that was recently imported.
boxplot(JoyOfCooking$CaloriesperServing2006,main = paste("Box-Whisker Plot of Calories Per Serving 2006"),ylab = "Calories Per Serving")
#This section will present a box-whisker plot of the JoyOfCooking data (Servings Per Recipe) that was recently imported.
boxplot(JoyOfCooking$ServingsperRecipe2006,main = paste("Histogram of Calories Per Serving 2006"),ylab = "Servings Per Recipe")
norm.sample <- rnorm(1000, mean=0, sd=1)
#This section will iterate a sequence from 2 to 64, which will result in a sequence of 6 integers:  2,4,8,16,32,64
# This will prevent the use of scientific notation in the output
options(scipen=999)
#The sequence is being generated and assigned to "mu"
mu.sequence <- c(1,2,3,4,5,6)
mu <- 2^mu.sequence
mu
#This section will calculate the skewness, plot histogram, QQ-norm, and box-whisker plots for the 1st sample
#This loads the library "moments" so the skewness function can be used.
library(moments)
#The number of sample values for use with the Poisson distribution is being assigned to "N";The sample values along with the sequence "mu" will be input into the rpois() function
N <- 1000
set.seed(123456)
skewtest1 <- rpois(N,mu[1])
skew1 <- skewness(skewtest1)
#These are the 3 plots being generated using the previously generated data.
hist(skewtest1, main = "lambda = 2")
qqnorm(skewtest1)
boxplot(skewtest1,ylab = paste("skewness=",skew1))
par(mfrow=c(1,3))
#This section will calculate the skewness, plot histogram, QQ-norm, and box-whisker plots for the 2nd sample
#This loads the library "moments" so the skewness function can be used.
library(moments)
#The number of sample values for use with the Poisson distribution is being assigned to "N";The sample values along with the sequence "mu" will be input into the rpois() function
N <- 1000
set.seed(123456)
skewtest2 <- rpois(N,mu[2])
skew2 <- skewness(skewtest2)
#These are the 3 plots being generated using the previously generated data.
hist(skewtest2, main = "lambda = 4")
qqnorm(skewtest2)
boxplot(skewtest2,ylab = paste("skewness=",skew2))
par(mfrow=c(1,3))
#This section will calculate the skewness, plot histogram, QQ-norm, and box-whisker plots for the 3rd sample
#This loads the library "moments" so the skewness function can be used.
library(moments)
#The number of sample values for use with the Poisson distribution is being assigned to "N";The sample values along with the sequence "mu" will be input into the rpois() function
N <- 1000
set.seed(123456)
skewtest3 <- rpois(N,mu[3])
skew3 <- skewness(skewtest3)
#These are the 3 plots being generated using the previously generated data.
hist(skewtest3, main = "lambda = 8")
qqnorm(skewtest3)
boxplot(skewtest3,ylab = paste("skewness=",skew3))
par(mfrow=c(1,3))
#This section will calculate the skewness, plot histogram, QQ-norm, and box-whisker plots for the 4th sample
#This loads the library "moments" so the skewness function can be used.
library(moments)
#The number of sample values for use with the Poisson distribution is being assigned to "N";The sample values along with the sequence "mu" will be input into the rpois() function
N <- 1000
set.seed(123456)
skewtest4 <- rpois(N,mu[4])
skew4 <- skewness(skewtest4)
#These are the 3 plots being generated using the previously generated data.
hist(skewtest4, main = "lambda = 16")
qqnorm(skewtest4)
boxplot(skewtest4,ylab = paste("skewness=",skew4))
par(mfrow=c(1,3))
#This section will calculate the skewness, plot histogram, QQ-norm, and box-whisker plots for the 5th sample
#This loads the library "moments" so the skewness function can be used.
library(moments)
#The number of sample values for use with the Poisson distribution is being assigned to "N";The sample values along with the sequence "mu" will be input into the rpois() function
N <- 1000
set.seed(123456)
skewtest5 <- rpois(N,mu[5])
skew5 <- skewness(skewtest5)
#These are the 3 plots being generated using previously generated data.
hist(skewtest5, main = "lambda = 32")
qqnorm(skewtest5)
boxplot(skewtest5,ylab = paste("skewness=",skew5))
par(mfrow=c(1,3))
#This section will calculate the skewness, plot histogram, QQ-norm, and box-whisker plots for the 6th sample
#This loads the library "moments" so the skewness function can be used.
library(moments)
#The number of sample values for use with the Poisson distribution is being assigned to "N";The sample values along with the sequence "mu" will be input into the rpois() function
N <- 1000
set.seed(123456)
skewtest6 <- rpois(N,mu[6])
skew6 <- skewness(skewtest6)
#These are the 3 plots being generated using previously generated data.
hist(skewtest6, main = "lambda = 64")
qqnorm(skewtest6)
boxplot(skewtest6,ylab = paste("skewness=",skew6))
par(mfrow=c(1,3))
skew <- 1:100
for(i in 1:100) {
norm.sample <- rnorm(1000, mean=0, sd=1)
skew[i] <- skewness(norm.sample)
}
hist(skew)
summary(skew)
skew1 <- skewness(skewtest1)
skew2 <- skewness(skewtest2)
skew3 <- skewness(skewtest3)
skew4 <- skewness(skewtest4)
skew5 <- skewness(skewtest5)
skew6 <- skewness(skewtest6)
skew1
skew2
skew3
skew4
skew5
skew6
# testv <- c(1,2,3,4,5,6,7,8,9,10)
#Iterating test sequence
testv <- c()
for (t in 1:100){
testv[t] <- rnorm(100)
}
testv
#Vector of test bins
testbins <- c(5,10,50)
#Creating function and running test case
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:len1){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(testv,testbins,"Histogram Test","x-axis","y-axis bins=")
#Path information for reading file from local machine
PathTohidalgo = "C:/Users/drewm/Documents/GitHub/code-stat700/hidalgo.dat"
#Assigning data from file to data frame
hidalgo <- read.delim(PathTohidalgo,header=TRUE,skip= 0,sep = "",as.is=TRUE)
#Creating function and running requested values
hidalgo <- as.numeric(hidalgo$X.060)
bins <- c(12,36,60)
func <- function(sampv,bins,mainlabel,xlabel,ylabel) {
v <- c()
len <- length(sampv)
len1 <- length(bins)
#iterate the number of entries from vector
for(i in  1:len)
v[i] <- sampv[i]
for (k in 1:length(bins)){
hists <- hist(v,breaks = bins[k],main = mainlabel,xlab = xlabel,ylab = paste(ylabel, bins[k]))
}
return(hists)
}
func(hidalgo,bins,"1872 Hidalgo issue","Thickness (mm)","Frequency, bins =")
